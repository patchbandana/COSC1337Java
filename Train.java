/*Eman Eizenga
 * COSC 1337 001
 * 2023-11-17
 * Purpose: To encapsulate information about an individual Train. (Program5Trains)
 */
package trainsDemo;

import java.util.ArrayList;

/**Encapsulates information about an individual Train.
 * @author emane
 */
public class Train {
	/**The name of the Train*/
	private String name;
	/**A list of all Passengers on this Train*/
	private ArrayList<Passenger> passengers;

	/**Creates a new Train with input information
	 * @param name The desired name of this Train
	 */
	public Train(String name) {
		setName(name);
		passengers = new ArrayList<Passenger>();
	}

	/**Returns the name of this Train
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/** Sets the name of this Train
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**Adds a passenger to the list of Passengers and returns
	 * the size of the list.
	 * 
	 * @param passenger The Passenger to be added
	 * @return The number of Passengers on this Train
	 */
	public int addPassenger(Passenger passenger) {
		passengers.add(passenger);
		return passengers.size();
	}

	/**Returns the percentage of Passengers which are traveling First Class
	 * 
	 * @return the percentage of passengers with first class tickets
	 */
	public double getPercentInFirstClass() {
		int generalCount = 0;
		int firstClassCount = 0;
		for (Passenger currentPassenger:passengers) {
			generalCount++;
			if (currentPassenger.isFirstClass())
				firstClassCount++;
		}
		return (double) firstClassCount / generalCount;
	}

	/**Returns the total revenue generated by this Train
	 * 
	 * @param priceForFirstClass price for a first class ticket
	 * @param regularPrice price for a regular ticket
	 * @return The total revenue generated by this Train
	 */
	public double getTrainRevenue(double priceForFirstClass,
			double regularPrice) {
		double total = 0;
		for (Passenger currentPassenger: passengers)
			if (currentPassenger.isFirstClass())
				total += priceForFirstClass;
			else 
				total += regularPrice;
		return total;
	}

	/**Returns true iff nameOfPassenger is on this Train.
	 * 
	 * @param nameOfPassenger The name of the passenger
	 * @return true iff nameOfPassenger is on this Train.
	 */
	public boolean isPassengerOnTrain(String nameOfPassenger) {
		for (Passenger currentPassenger:passengers)
			if (currentPassenger.getName().equals(nameOfPassenger))
				return true;
		return false;
	}

	/**Returns true iff the two objects should be considered equal
	 * 
	 * @param o This object to compare this to
	 * @return true iff the two objects should be considered equal
	 */
	@Override
	public boolean equals(Object o) {
		return toString().equals(o.toString());
	}

	/**Returns a String version of this Train
	 * 
	 * @return a String version of this Train
	 */
	@Override
	public String toString() {
		String returnString = getName()+":\n";
		int number = 1;
		for (Passenger current:passengers)
			returnString += (number++)+" - "+current+"\n";
		return returnString;
	}
}